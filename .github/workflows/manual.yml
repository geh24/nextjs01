# This is a basic workflow that is manually triggered

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      branch:
        description: 'Branch to deploy'
        default: 'standalone'
        required: true
        type: choice
        options:
        - standalone
        - dev
        - master
      host:
        description: 'Host to deploy'
        default: 'nextjs03'
        required: true
        type: choice
        options:
        - nextjs01
        - nextjs02
        - nextjs03
      environment:
        description: 'REST-API backend'
        default: 'rest'
        required: true
        type: choice
        options:
        - rest

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Job VC-Build
  VC-Build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout selected branch
      uses: actions/checkout@v4
      with:
        ref: '${{ inputs.branch }}'
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
    - name: Restore cache
      uses: actions/cache@v4
      with:
        path: |
          .next/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
    - name: Install dependencies
      run: |
        set -x
        npm ci
    - name: Build with Next.js
      run: |
        set -x
        pwd
        # setup REST-API
        cp .environments/${{ inputs.environment }} .env.local
        ls -la
        npm run build
        cd .next/standalone
        cp -r ../../public/ .
        cp -r ../static/ ./.next
        ls -la
        ls -la node_modules
        npm i sharp
        tar cjf ~/standalone.tar.bz2 .
        ls -la ~/standalone.tar.bz2
    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: gh-artifact
        path: ~/standalone.tar.bz2
        compression-level: 0
        overwrite: true

  # Job VC-Deploy
  VC-Deploy:
    needs: VC-Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout master
      uses: actions/checkout@v4
      with:
        ref: master
        sparse-checkout: .github
    - name: Download
      uses: actions/download-artifact@v4
      with:
        name: gh-artifact
        path: ~/
    - name: Test
      run: |
        set -x
        cd
        ls -la
    - name: Setup ssh
      run: |
        set -x
        pwd
        mkdir ~/.ssh
        cp .github/workflows/id_rsa ~/.ssh/id_rsa
        chmod go-r ~/.ssh/id_rsa
        cp .github/workflows/known_hosts ~/.ssh/known_hosts
    - name: SSH
      run: |
        set -x
        echo "Hello ${{ inputs.branch }}"
        ssh ${{ inputs.host }}@vm03.gh-admin.de "hostname; id; pwd"
        date
        ssh ${{ inputs.host }}@vm03.gh-admin.de "sudo /usr/bin/systemctl stop ${{ inputs.host }}"
        sleep 10
        date
        ssh ${{ inputs.host }}@vm03.gh-admin.de "rm -fr /data/www/${{ inputs.host }}/.[en]* /data/www/${{ inputs.host }}/*"
        scp standalone.tar.bz2 ${{ inputs.host }}@vm03.gh-admin.de:/data/www/${{ inputs.host }}
        ssh ${{ inputs.host }}@vm03.gh-admin.de "cd /data/www/${{ inputs.host }}; xvfj /data/www/${{ inputs.host }}; ls -la"
        date
        ssh ${{ inputs.host }}@vm03.gh-admin.de "sudo /usr/bin/systemctl start ${{ inputs.host }}"
        date
